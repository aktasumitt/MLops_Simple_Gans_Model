name: workflow

# Her pushta workflow calıssın
on:
  push:
    branches:
      - main
    paths-ignore:
      - 'README.md'

# İzinler
permissions:
  id-token: write
  contents: read

jobs:
# Kodu integrate edip github actions içinde test edecek.
  integration:
    name: Continuous Integration
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: setup python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Bağimliliklari yükle
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Lint code
        run: echo "Linting repository" 

      - name: Testleri detayli çaliştir
        run: |
          pytest --disable-warnings -v test/test.py

      - name: Testlerin sonucu
        run: |
          echo "Unit testler çaliştirildi ve sonuçlar görüntülendi"


# Kodu dockerfile ile docker image haline getir ve aws ECR'a pushla
  Continuous-Delivery:
    name: Continuous Delivery
    needs: integration
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Install Utilities
        run: |
          sudo apt-get update
          sudo apt-get install -y jq unzip
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.REPOSITORY_NAME }}
          IMAGE_TAG: latest
        run: |
          echo "ECR_REGISTRY: $ECR_REGISTRY"
          echo "ECR_REPOSITORY: $ECR_REPOSITORY"
          echo "IMAGE_TAG: $IMAGE_TAG"

          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
          
# AWS-EC2 uzerinde ECR içindeki son docker image pull et ve çalıştır          
  Continuous-Deployment:
    needs: Continuous-Delivery
    runs-on: self-hosted
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      
      
      - name: Pull latest images
        run: |
         docker pull ${{secrets.AWS_ECR_LOGIN_URI}}/${{ secrets.REPOSITORY_NAME }}:latest
         
      # - name: Stop and remove  container if running
      #   run: |
      #    docker ps -q --filter "name=mltest" | grep -q . && docker stop mltest && docker rm -fv mltest
       
      - name: Run Docker Image to serve users
        run: |
         docker run -d -p 8080:8080 --ipc="host" --name=generateimg -e 'AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}' -e 'AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}' -e 'AWS_REGION=${{ secrets.AWS_REGION }}'  ${{secrets.AWS_ECR_LOGIN_URI}}/${{ secrets.REPOSITORY_NAME }}:latest
      - name: Clean previous images and containers
        run: |
         docker system prune -f
